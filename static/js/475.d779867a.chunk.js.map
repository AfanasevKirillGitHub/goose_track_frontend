{"version":3,"file":"static/js/475.d779867a.chunk.js","mappings":"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","sources":["pages/CalendarPage/CalendarHeader/CalendarHeader.styled.ts","pages/CalendarPage/CalendarHeader/CalendarHeader.tsx","pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CalendarPage/CalendarGrid/CalendarGrid.styled.ts","pages/CalendarPage/CalendarGrid/CalendarGrid.tsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CalendarHeaderWrapper = styled.span`\n  background-color: #2a2b2d;\n  height: 48px;\n`;\n","import * as SC from './CalendarHeader.styled';\n\nexport const CalendarHeader = () => {\n  return <SC.CalendarHeaderWrapper></SC.CalendarHeaderWrapper>;\n};\n","import styled from 'styled-components';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  background-color: #565759;\n`;\n\nexport const TextWrapper = styled.span`\n  font-size: 32px;\n`;\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n  margin-right: 8px;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  border: unset;\n  background-color: #565759;\n  height: 20px;\n  margin-right: 2px;\n  border-radius: 4px;\n  color: #e6e6e6;\n`;\n","import * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n}: IProps) => {\n  return (\n    <SC.CalendarMonitorWrapper>\n      <div>\n        <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n        <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n      </div>\n      <SC.ButtonsWrapper>\n        <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n          &lt;\n        </SC.ButtonWrapper>\n        <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n          Today\n        </SC.ButtonWrapper>\n        <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n          &gt;\n        </SC.ButtonWrapper>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import styled from 'styled-components';\n\ninterface ICalendarGridProps {\n  isHeader?: boolean;\n}\n\ninterface ITopRopperInCellProps {\n  justifyContent: string;\n}\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const CalendarGrid = styled.div<ICalendarGridProps>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* grid-template-rows: repeat(6, 1fr); */\n  grid-gap: 1px;\n  background-color: ${p => (p.isHeader ? '#1e1f21' : '#4d4c4d')};\n  ${p => p.isHeader && 'border-bottom: 1px solid #4d4c4d'}\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  min-width: 140px;\n  min-height: ${p => (p.isHeader ? 40 : 80)}px;\n  background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')};\n  color: ${p => (p.isSelectedMonth ? 'wheat' : '#4d4c4d')};\n  ${p => p.isHeader && 'text-align:center'}\n`;\n\nexport const TopRopperInCell = styled.div<ITopRopperInCellProps>`\n  display: flex;\n  justify-content: ${p => (p.justifyContent ? p.justifyContent : 'flex-start')};\n`;\n\nexport const DayWrapper = styled.div`\n  width: 33px;\n  height: 33px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 2px;\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n`;\n","import moment from 'moment';\nimport * as SC from './CalendarGrid.styled';\n\ninterface IProps {\n  startDay: moment.Moment;\n  today: moment.Moment;\n}\n\nexport const CalendarGrid = ({ startDay, today }: IProps) => {\n  const totalDays = 42;\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return moment().isSame(day, 'day');\n  };\n\n  const isSelectedMonth = (month: moment.Moment): boolean => {\n    return today.isSame(month, 'month');\n  };\n\n  return (\n    <>\n      <SC.CalendarGrid isHeader>\n        {[...Array(7)].map((_, idx) => (\n          <SC.CellWrapper isHeader key={idx} isSelectedMonth={true}>\n            {moment()\n              .day(idx + 1)\n              .format('ddd')\n              .toUpperCase()}\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n      <SC.CalendarGrid>\n        {daysArray.map(dayItem => (\n          <SC.CellWrapper\n            key={dayItem.format('DDMMYY')}\n            isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n            isSelectedMonth={isSelectedMonth(dayItem)}\n          >\n            <SC.TopRopperInCell justifyContent={'flex-end'}>\n              <SC.DayWrapper>\n                {isCurrentDay(dayItem) ? (\n                  <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                ) : (\n                  dayItem.format('D')\n                )}\n              </SC.DayWrapper>\n            </SC.TopRopperInCell>\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ShadowWrapper = styled.div`\n  border-radius: 8px;\n  overflow: hidden;\n  border-top: 1px solid #737374;\n  border-left: 1px solid #464648;\n  border-right: 1px solid #464648;\n  border-bottom: 2px solid #464648;\n  box-shadow: 0 0 0 1px #1a1a1a 0 8px 20px 6px #888;\n`;\n\n// export const Container = styled.div`\n//   display: flex;\n//   align-items: center;\n//   flex-direction: column;\n//   max-width: 320px;\n//   margin-left: auto;\n//   margin-right: auto;\n//   @media screen and (min-width: 768px) and (max-width: 1279px) {\n//     max-width: 768px;\n//   }\n//   @media screen and (min-width: 1280px) {\n//     max-width: 1280px;\n//   }\n// `;\n","// import { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { CalendarHeader } from './CalendarHeader/CalendarHeader';\nimport { CalendarMonitor } from './CalendarMonitor/CalendarMonitor';\nimport { CalendarGrid } from './CalendarGrid/CalendarGrid';\nimport * as SC from './CalendarPage.styled';\nimport { useState } from 'react';\n\nexport const CalendarPage = () => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n\n  // const today = moment();\n  const [today, setToday] = useState(() => moment());\n  const startDay = today.clone().startOf('month').startOf('week');\n\n  //\n  // const startDayQuery = startDay.clone().format('X');\n  // const endDayQuery = startDay.clone().add(42, \"days\").format('X');\n  //\n\n  const prevHandler = () => {\n    setToday(prev => prev.clone().subtract(1, 'month'));\n  };\n  const nextHandler = () => {\n    setToday(prev => prev.clone().add(1, 'month'));\n  };\n  const todayHandler = () => {\n    setToday(moment());\n  };\n\n  // const endDay = moment().endOf('month').endOf('week');\n\n  // const calendar = [];\n  // const day = startDay.clone();\n  // while (!day.isAfter(endDay)) {\n  //   calendar.push(day.clone());\n  //   day.add(1, 'day');\n  // }\n\n  // startDay.format('YYYY-MM-DD');\n\n  // const { t } = useTranslation();\n\n  return (\n    <SC.ShadowWrapper>\n      <CalendarHeader />\n      <CalendarMonitor\n        prevHandler={prevHandler}\n        nextHandler={nextHandler}\n        todayHandler={todayHandler}\n        today={today}\n      />\n      <CalendarGrid startDay={startDay} today={today} />\n    </SC.ShadowWrapper>\n  );\n};\n"],"names":["CalendarHeaderWrapper","styled","CalendarHeader","CalendarMonitorWrapper","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","format","type","onClick","CalendarGrid","p","isHeader","CellWrapper","isWeekend","isSelectedMonth","TopRopperInCell","justifyContent","DayWrapper","CurrentDay","startDay","day","clone","subtract","daysArray","Array","map","add","isCurrentDay","moment","isSame","_","idx","toUpperCase","dayItem","month","ShadowWrapper","CalendarPage","week","dow","useState","setToday","startOf","prev"],"sourceRoot":""}