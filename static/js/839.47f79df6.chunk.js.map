{"version":3,"file":"static/js/839.47f79df6.chunk.js","mappings":"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","sources":["hooks/useInput.ts","hooks/useValidation.ts","components/LoginForm/LoginForm.styled.ts","components/LoginForm/LoginForm.tsx","pages/LoginPage/LoginPage.styled.tsx","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import { useValidation } from './useValidation';\nimport { useState } from 'react';\n\ninterface ISetings {\n  [key: string]: boolean | number | string;\n}\n\nexport const useInput = (initialValue: string, validations: ISetings) => {\n  const [value, setValue] = useState(initialValue);\n  const [isDirty, setIsDirty] = useState(false);\n  const valid = useValidation(value, validations);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n \n  const onBlur = (e: React.FocusEvent<HTMLElement>) => {\n    setIsDirty(true)\n  }\n\n\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid,\n  };\n};\n","import { useEffect, useState } from 'react';\n\ninterface ISetings {\n  [key: string]: boolean | number | string;\n}\n\nexport const useValidation = (value: string, validations: ISetings) => {\n  const [emailError, setEmailError] = useState(false);\n  const [confirmError, setConfirmError] = useState(false);\n  const [nameError, setNameError] = useState(false)\n  const [passwordError, setPasswordError] = useState(false)\n  const [validForm, setValidForm] = useState(false)\n\n  useEffect(() => {\n    for (const validation in validations) {\n      switch (validation) {\n        case 'isEmail':\n          const re =\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          re.test(String(value).toLowerCase())\n            ? setEmailError(false)\n            : setEmailError(true);\n          break;\n        case 'isSamePassword':\n          value === validations[validation]\n            ? setConfirmError(false)\n            : setConfirmError(true);\n          break;\n        case 'isName':\n          const reName = /^\\p{L}+$/u\n          reName.test(String(value).toLowerCase())\n          ? setNameError(false)\n          : setNameError(true);\n          break\n        case 'isPassword':\n          const rePassword = /^(?=.*)[^\\s]{7,32}$/ \n          rePassword.test(String(value).toLowerCase())\n          ? setPasswordError(false)\n          : setPasswordError(true);\n          break\n        default:\n          console.log('нет такой проверки');\n      }\n    }\n  }, [value, validations]);\n\nuseEffect(() => {\n  if(emailError || nameError || passwordError || confirmError){\n    setValidForm(false)\n  } else{\n    setValidForm(true)\n  }\n},[emailError, nameError, passwordError, confirmError])\n\n  return {\n    emailError,\n    confirmError,\n    nameError,\n    passwordError,\n    validForm\n  };\n};\n","import styled from 'styled-components';\n\n\nexport const Input = styled.input`\nborder-radius: 40px;\nborder: 1px solid rgba(245, 146, 86, 0.5);\nbackground-color: rgba(253, 247, 242, 1);\noutline: none;\n\n\n@media (max-width: 767px) {\n    padding-top: 11px;\n    padding-right: 14px;\n    padding-bottom: 12px;\n    padding-left: 14px;\n    height: 40px;\n    width: 280px;\n    font-weight: 400;\n    font-size: 14px;  \n    line-height: 1.35;  \n    // margin-bottom: 24px;\n}\n@media (min-width: 768px) {\n    padding-top: 14px;\n    padding-right: 32px;\n    padding-bottom: 13px;\n    padding-left: 32px;\n    height: 52;\n    width: 448px;\n    font-weight: 400;\n    font-size: 18px;  \n    line-height: 1.39;\n    // margin-bottom: 40px;\n}\n\n`;\nexport const Button = styled.button`\nborder-radius: 40px;\nborder: 2px solid #F59256;\nbackground-color: #F59256;\ncolor: white;\ncursor: pointer;\n\n@media (max-width: 767px) {\n    // padding-top: 11px;\n    // padding-right: 14px;\n    // padding-bottom: 12px;\n    // padding-left: 14px;\n    height: 44px;\n    width: 280px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;  \n    margin-bottom: 40px;\n    margin-top: 16px;\n};\n@media (min-width: 768px) {\n    // padding-top: 14px;\n    // padding-right: 32px;\n    // padding-bottom: 13px;\n    // padding-left: 32px;\n    height: 44px;\n    width: 458px;\n    font-weight: 500;\n    font-size: 20px;  \n    line-height: 1.35;\n    margin-bottom: 40px;\n};\n@media (min-width: 1280px) {\n    // padding-top: 14px;\n    // padding-right: 32px;\n    // padding-bottom: 13px;\n    // padding-left: 32px;\n    height: 48px;\n    // width: 458px;\n    // font-weight: 400;\n    // font-size: 18px;  \n    // line-height: 1.39;\n};\n`\nexport const InnerDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n\n@media (max-width: 767px) {\n    width: 100%;\n    height: 100vh\n};\n@media (min-width: 768px) {\n    background-color: #FFF;\n    padding-top: 60px;\n    padding-right: 80px;\n    padding-bottom: 60px;\n    padding-left: 80px;\n    width: 608px;\n    height: 492px;\n    border-radius: 40px;\n}\n@media (min-width: 1280px) {\n    width: 618px;\n    height: 496px;\n};\n\n`\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n`\nexport const Title = styled.h2`\nmargin-bottom: 13px;\n\n@media (max-width: 767px) {\n    font-weight: 700;\n    font-size: 24px;\n    line-height: 1.375;\n    \n};\n@media (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 1.36;\n};\n\n`\nexport const Div = styled.div`\nposition: relative;\n@media (max-width: 767px) { \n    margin-bottom: 24px;\n};\n@media (min-width: 768px) { \n    margin-bottom: 40px;\n};\n`\nexport const Notification = styled.span`\nposition: absolute;\nfont-size: 12px;\nleft: 20px;\nbottom: -40%;\n`\nexport const Google = styled.a`\n margin-bottom: 13px;\n height: 24px\n\n`\nexport const Eye = styled.span`\n    position: absolute;\n    right: 15px;\n    top: 55%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    color: #F59256;\n\n    @media (min-width: 768px) {\n        right: 20px;  \n    }\n`","import { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { signIn } from '../../redux/auth/authOperations';\nimport { ICredentials } from '../../helpers/interfaces/auth/authInterfaces';\nimport { NavLink } from 'react-router-dom';\nimport * as SC from './LoginForm.styled';\nimport { useInput } from '../../hooks/useInput';\nimport { FcGoogle } from 'react-icons/fc';\nimport { HiEye, HiEyeOff } from 'react-icons/hi';\nimport { useState } from 'react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch<ThunkDispatch<any, any, AnyAction>>();\n  const { t } = useTranslation();\n  const [passwordType, setPasswordType] = useState('password');\n\n  const email = useInput('', { isEmail: true });\n  const password = useInput('', { isPassword: true });\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    const payload: ICredentials = {\n      email: email.value.toLowerCase(),\n      password: password.value,\n    };\n    dispatch(signIn(payload));\n  };\n  return (\n    <SC.InnerDiv>\n      <SC.Title>{t('Sign In')}</SC.Title>\n      <SC.Google href=\"https://your-tasks-hv5t.onrender.com/api/auth/google\">\n        <FcGoogle style={{ width: '1.5em', height: '1.5em' }} />\n      </SC.Google>\n      <SC.Form onSubmit={handleSubmit} autoComplete=\"off\">\n        <SC.Div>\n          <label>\n            Email\n          <SC.Input\n            style={{\n              border:\n                ((email.isDirty &&\n                  !email.emailError &&\n                  '1px solid green') as string) ||\n                ((email.isDirty &&\n                  email.emailError &&\n                  '1px solid red') as string),\n            }}\n            onChange={e => email.onChange(e)}\n            onBlur={e => email.onBlur(e)}\n            type=\"email\"\n            value={email.value}\n            name=\"email\"\n            placeholder={t('Example@gmail.com')!}\n            required\n          />\n          </label>\n          {(email.isDirty && email.emailError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter a valid Email')}\n            </SC.Notification>\n          )) ||\n            (email.isDirty && !email.emailError && (\n              <SC.Notification style={{ color: 'green' }}>\n                {t('Email is correct')}\n              </SC.Notification>\n            ))}\n        </SC.Div>\n        <SC.Div>\n          <label>\n            Password\n          <SC.Input\n            style={{\n              border:\n                ((password.isDirty &&\n                  password.passwordError &&\n                  '1px solid red') as string) ||\n                ((password.isDirty &&\n                  !password.passwordError &&\n                  '1px solid green') as string),\n            }}\n            onChange={e => password.onChange(e)}\n            onBlur={e => password.onBlur(e)}\n            type={passwordType}\n            value={password.value}\n            name=\"password\"\n            placeholder={t('Password')!}\n            required\n          />\n          </label>\n          {password.isDirty && password.passwordError && (\n            <SC.Notification style={{ color: 'red' }}>\n              {t('Enter a valid Password')}\n            </SC.Notification>\n          )}\n          {password.isDirty && !password.passwordError && (\n            <SC.Notification style={{ color: 'green' }}>\n              {t('Password is correct')}\n            </SC.Notification>\n          )}\n          <SC.Eye\n            onClick={() => {\n              passwordType === 'password'\n                ? setPasswordType('text')\n                : setPasswordType('password');\n            }}\n          >\n            {passwordType === 'password' ? <HiEye /> : <HiEyeOff />}\n          </SC.Eye>\n        </SC.Div>\n        <SC.Button type=\"submit\" disabled={!email.validForm || !password.validForm}>{t('Sign In')}</SC.Button>\n      </SC.Form>\n      <p>\n        {t(\"Don't have an account\")}?{' '}\n        <NavLink to=\"/registration\">{t('Register')}</NavLink>\n      </p>\n    </SC.InnerDiv>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Main = styled.main`\n    display: flex;\n    justify-content: center;\n\n    @media (min-width: 768px) {\n        padding-top: 200px;\n        // background-image: url(\"../../helpers/photos/loginTab.png\")\n    }\n    @media (min-width: 1280px) {\n        padding-top: 80px;\n    };\n}\n\n`","import { LoginForm } from '../../components/LoginForm/LoginForm';\nimport * as SC from './LoginPage.styled';\n\nexport const LoginPage = () => {\n  return (\n    <SC.Main>\n      <LoginForm />\n    </SC.Main>\n  );\n};\n"],"names":["useInput","initialValue","validations","useState","value","setValue","isDirty","setIsDirty","valid","emailError","setEmailError","confirmError","setConfirmError","nameError","setNameError","passwordError","setPasswordError","validForm","setValidForm","useEffect","validation","test","String","toLowerCase","console","log","useValidation","onChange","e","target","onBlur","Input","styled","Button","InnerDiv","Form","Title","Div","Notification","Google","Eye","LoginForm","dispatch","useDispatch","t","useTranslation","passwordType","setPasswordType","email","isEmail","password","isPassword","href","style","width","height","onSubmit","evt","preventDefault","payload","signIn","autoComplete","border","type","name","placeholder","required","color","onClick","disabled","to","Main","LoginPage"],"sourceRoot":""}