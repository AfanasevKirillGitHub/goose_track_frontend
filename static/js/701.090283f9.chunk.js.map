{"version":3,"file":"static/js/701.090283f9.chunk.js","mappings":"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","sources":["pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CurrentDayPage/CurrentDayPage.styled.ts","pages/CurrentDayPage/CurrentDayPage.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  background-color: #565759;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const TextWrapper = styled.span`\n  font-size: 32px;\n  margin-right: 10px;\n`;\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n  margin-right: 8px;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  border: unset;\n  cursor: pointer;\n  background-color: #565759;\n  height: 20px;\n  margin-right: 2px;\n  border-radius: 4px;\n  color: #e6e6e6;\n`;\n","import moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport 'moment/locale/uk';\n\nimport { NavLink } from 'react-router-dom';\nimport * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n  currentDay,\n}: IProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <div>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </div>\n        <SC.ButtonsWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n            &lt;\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            {t('Today')}\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n            &gt;\n          </SC.ButtonWrapper>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <NavLink to=\"/user/calendar\">Month/</NavLink>\n        <NavLink to=\"day\">Day</NavLink>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import styled from 'styled-components';\n\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  /* background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')}; */\n  color: black;\n  ${p => p.isHeader && 'text-align:center'}\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n\n  width: 100%;\n  height: 100%;\n`;\n\nexport const WeekWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n\nexport const DaysWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n\nexport const DayOfWeek = styled.div`\n  :not(:last-child) {\n    margin-right: 20px;\n  }\n`;\n\nexport const WeekAndDayWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n","import moment from 'moment';\nimport 'moment/locale/uk';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CalendarMonitor } from '../CalendarPage/CalendarMonitor/CalendarMonitor';\nimport * as SC from './CurrentDayPage.styled';\n\nexport const CurrentDayPage = () => {\n  const { t } = useTranslation();\n  moment.updateLocale('en', { day: { dow: 1 } });\n\n  moment.locale(t(`lang`)!);\n  const [today, setToday] = useState(() => {\n    const data = JSON.parse(localStorage.getItem('data')!) || '';\n    return data ? moment(new Date(data)) : moment();\n  });\n  const [selectedDay, setSelectedDay] = useState(() => {\n    const data = JSON.parse(localStorage.getItem('data')!) || '';\n    return data ? moment(new Date(data)) : moment();\n  });\n\n  useEffect(() => {\n    return () => localStorage.removeItem('data');\n  }, []);\n\n  const totalDays = 7;\n  const startDay = today.clone().startOf('isoWeek');\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const prevHandler = () => {\n    const prevDay = today.clone().subtract(1, 'day');\n    if (prevDay.isBefore(startDay)) {\n      setSelectedDay(startDay);\n      setToday(startDay);\n    } else {\n      setSelectedDay(prevDay);\n      setToday(prevDay);\n    }\n  };\n\n  const nextHandler = () => {\n    const nextDay = today.clone().add(1, 'day');\n    if (nextDay.isAfter(startDay.clone().add(6, 'day'))) {\n      setSelectedDay(startDay.clone().add(6, 'day'));\n      setToday(startDay.clone().add(6, 'day'));\n    } else {\n      setToday(nextDay);\n      setSelectedDay(nextDay);\n    }\n  };\n\n  const todayHandler = () => {\n    setSelectedDay(moment());\n    setToday(moment());\n  };\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return selectedDay.isSame(day, 'day');\n  };\n\n  return (\n    <main>\n      <SC.PageWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n          currentDay={true}\n        />\n        <SC.WeekAndDayWrapper>\n          <SC.WeekWrapper>\n            {daysArray.map((dayItem, idx) => (\n              <SC.DayOfWeek key={idx}>\n                {dayItem.format('ddd').toUpperCase()}\n              </SC.DayOfWeek>\n            ))}\n          </SC.WeekWrapper>\n          <SC.DaysWrapper>\n            {daysArray.map(dayItem => (\n              <div key={dayItem.format('DDMMYY')}>\n                <SC.CellWrapper>\n                  {isCurrentDay(dayItem) ? (\n                    <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                  ) : (\n                    dayItem.format('D')\n                  )}\n                </SC.CellWrapper>\n              </div>\n            ))}\n          </SC.DaysWrapper>\n        </SC.WeekAndDayWrapper>\n      </SC.PageWrapper>\n    </main>\n  );\n};\n"],"names":["CalendarMonitorWrapper","styled","LeftWrapper","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","currentDay","t","useTranslation","format","type","onClick","to","PageWrapper","CellWrapper","p","isWeekend","isHeader","CurrentDay","WeekWrapper","DaysWrapper","DayOfWeek","WeekAndDayWrapper","CurrentDayPage","moment","day","dow","useState","data","JSON","parse","localStorage","getItem","Date","setToday","selectedDay","setSelectedDay","useEffect","removeItem","startDay","clone","startOf","subtract","daysArray","Array","map","add","isCurrentDay","isSame","prevDay","isBefore","nextDay","isAfter","dayItem","idx","toUpperCase"],"sourceRoot":""}