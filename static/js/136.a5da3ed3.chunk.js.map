{"version":3,"file":"static/js/136.a5da3ed3.chunk.js","mappings":"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","sources":["pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CalendarPage/CalendarGrid/CalendarGrid.styled.ts","pages/CalendarPage/CalendarGrid/CalendarGrid.tsx","pages/CalendarPage/CalendarPage.styled.ts","pages/CalendarPage/CalendarPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-top: 32px;\n  padding-bottom: 32px;\n  width: 100%;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\nexport const TextWrapperOutline = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #3e85f3;\n  color: ${props => props.theme.colors.white};\n  padding: 8px 12px;\n  border-radius: 8px;\n  min-width: 173px;\n  height: 100%;\n`;\n\nexport const TextWrapper = styled.span`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 0.9;\n  text-transform: uppercase;\n  color: #ffffff;\n  min-width: 24px;\n\n  &:not(:last-of-type) {\n    margin-right: 10px;\n  }\n`;\n\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  margin-left: 20px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const ChevronButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background-color: transparent;\n  padding: 10px 10px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  color: #616161;\n\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n\nexport const ButtonWrapper = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background-color: transparent;\n  border-radius: 8px;\n  padding: 10px 10px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  color: #616161;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: #3e85f3;\n  padding: 8px 16px;\n  background-color: #e3f3ff;\n  &.active {\n    background-color: #3e85f350;\n  }\n`;\n\nexport const LinkMonth = styled(Link)`\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n`;\n\nexport const LinkDay = styled(Link)`\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n","import moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport 'moment/locale/uk';\n\nimport * as SC from './CalendarMonitor.styled';\nimport { SVG } from '../../../images';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler?: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n  nextDisabled?: boolean;\n  prevDisabled?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  // todayHandler,\n  currentDay,\n  nextDisabled,\n  prevDisabled,\n}: IProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <SC.TextWrapperOutline>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </SC.TextWrapperOutline>\n        <SC.ButtonsWrapper>\n          <SC.ChevronButton\n            type=\"button\"\n            onClick={prevHandler}\n            disabled={prevDisabled}\n            style={{\n              transform: 'rotate(180deg)',\n              color: prevDisabled ? '#DCE3E5' : '#616161',\n            }}\n          >\n            <SVG.Chevron />\n          </SC.ChevronButton>\n          {/* <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            {t('Today')}\n          </SC.ButtonWrapper> */}\n          <SC.ChevronButton\n            type=\"button\"\n            onClick={nextHandler}\n            disabled={nextDisabled}\n            style={{\n              color: nextDisabled ? '#DCE3E5' : '#616161',\n            }}\n          >\n            <SVG.Chevron />\n          </SC.ChevronButton>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <SC.LinkMonth to=\"/user/calendar\">{t('Month')}</SC.LinkMonth>\n        <SC.LinkDay to={`/user/day/${today.format('YYYY-MM-DD')}`}>\n          {t('Day')}\n        </SC.LinkDay>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface ICalendarGridProps {\n  isHeader?: boolean;\n}\n\ninterface ITopRopperInCellProps {\n  justifyContent: string;\n}\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const CalendarGrid = styled.div<ICalendarGridProps>`\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* grid-template-rows: repeat(6, 1fr); */\n  grid-gap: 1px;\n  background-color: ${p =>\n    p.isHeader ? 'rgba(220, 227, 229, 0.8)' : 'rgba(220, 227, 229, 0.8)'};\n  ${p => p.isHeader && 'border-bottom: 1px solid #4d4c4d'}\n  width:100%;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: ${props => props.theme.radii.normal};\n\n  overflow: hidden;\n`;\n\nexport const WeekWrapper = styled.ul<ICellWrapperProps>`\n  list-style: none;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 15px;\n  padding: 14px 0;\n\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: ${props => props.theme.radii.normal};\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.286;\n  color: #616161;\n`;\n\nexport const DayOfWeekItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n`;\n\nexport const DayOfWeek = styled.span`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.125;\n  text-transform: uppercase;\n\n  color: #616161;\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  min-width: 120px;\n  min-height: 104px;\n  padding: 8px;\n  background-color: ${p => (p.isWeekend ? '#FFFFFF' : '#FFFFFF')};\n  color: ${p => (p.isSelectedMonth ? '#343434' : 'rgba(220, 227, 229, 0.8)')};\n`;\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const TopRopperInCell = styled.div<ITopRopperInCellProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.justifyContent ? p.justifyContent : 'flex-start')};\n`;\n\nexport const DayWrapper = styled.div`\n  width: 27px;\n  height: 26px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.125;\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props => props.theme.colors.blue};\n  color: ${props => props.theme.colors.white};\n  border-radius: ${props => props.theme.radii.normal};\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ShowDaywrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const TasksList = styled.ul`\n  list-style: none;\n  padding-left: 10px;\n`;\n","import moment from 'moment';\nimport * as SC from './CalendarGrid.styled';\nimport { useFetchTasksQuery } from '../../../redux/task/taskOperations';\n\ninterface IProps {\n  startDay: moment.Moment;\n  today: moment.Moment;\n}\n\nexport const CalendarGrid = ({ startDay, today }: IProps) => {\n  const lang = localStorage.getItem('i18nextLng') as string;\n\n  const totalDays = 42;\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const { data } = useFetchTasksQuery({ lang });\n\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return moment().isSame(day, 'day');\n  };\n\n  const isSelectedMonth = (month: moment.Moment): boolean => {\n    return today.isSame(month, 'month');\n  };\n\n  return (\n    <main style={{ width: '1087px' }}>\n      <SC.WeekWrapper>\n        {[...Array(7)].map((_, idx) => (\n          <SC.DayOfWeekItem key={idx}>\n            <SC.DayOfWeek>\n              {moment()\n                .day(idx + 1)\n                .format('ddd')\n                .toUpperCase()}\n            </SC.DayOfWeek>\n          </SC.DayOfWeekItem>\n        ))}\n      </SC.WeekWrapper>\n      {/* <SC.CalendarGrid isHeader></SC.CalendarGrid> */}\n      <SC.CalendarGrid>\n        {daysArray.map(dayItem => (\n          <SC.Link\n            to={`/user/day/${dayItem.format('YYYY-MM-DD')}`}\n            key={dayItem.format('DDMMYY')}\n          >\n            <SC.CellWrapper\n              isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n              isSelectedMonth={isSelectedMonth(dayItem)}\n            >\n              <SC.TopRopperInCell justifyContent={'flex-end'}>\n                <SC.ShowDaywrapper>\n                  <SC.DayWrapper>\n                    {isCurrentDay(dayItem) ? (\n                      <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                    ) : (\n                      dayItem.format('D')\n                    )}\n                  </SC.DayWrapper>\n                </SC.ShowDaywrapper>\n                <SC.TasksList>\n                  {data\n                    ?.filter(\n                      ({ date }) =>\n                        date >= dayItem.format('X') &&\n                        date <= dayItem.clone().endOf('day').format('X')\n                    )\n                    .map(({ date, title }) => (\n                      <li key={date}>\n                        {title['en']\n                          ? title['en']?.slice(0, 8)\n                          : title['ua']?.slice(0, 8)}\n                      </li>\n                    ))}\n                </SC.TasksList>\n              </SC.TopRopperInCell>\n            </SC.CellWrapper>\n          </SC.Link>\n        ))}\n      </SC.CalendarGrid>\n    </main>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ShadowWrapper = styled.div`\n  border-radius: 8px;\n  height: 100%;\n  overflow: hidden;\n  padding-left: 32px;\n  padding-right: 32px;\n  /* border-top: 1px solid #737374;\n  border-left: 1px solid #464648;\n  border-right: 1px solid #464648;\n  border-bottom: 2px solid #464648; */\n  box-shadow: 0 0 0 1px #1a1a1a 0 8px 20px 6px #888;\n`;\n","// import { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { useState } from 'react';\nimport 'moment/locale/uk';\nimport { useTranslation } from 'react-i18next';\nimport { CalendarMonitor } from './CalendarMonitor/CalendarMonitor';\nimport { CalendarGrid } from './CalendarGrid/CalendarGrid';\nimport * as SC from './CalendarPage.styled';\n\nexport const CalendarPage = () => {\n  const { t } = useTranslation();\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n\n  moment.locale(t(`lang`)!);\n\n  const [today, setToday] = useState(moment());\n  const startDay = today.clone().startOf('month').startOf('week');\n\n  const prevHandler = () => {\n    setToday(prev => prev.clone().subtract(1, 'month'));\n  };\n  const nextHandler = () => {\n    setToday(prev => prev.clone().add(1, 'month'));\n  };\n  const todayHandler = () => {\n    setToday(moment());\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <SC.ShadowWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n        />\n        <CalendarGrid startDay={startDay} today={today} />\n      </SC.ShadowWrapper>\n    </div>\n  );\n};\n"],"names":["CalendarMonitorWrapper","styled","LeftWrapper","TextWrapperOutline","props","theme","colors","white","TextWrapper","TitleWrapper","ButtonsWrapper","ChevronButton","Link","NavLink","LinkMonth","LinkDay","CalendarMonitor","today","prevHandler","nextHandler","currentDay","nextDisabled","prevDisabled","t","useTranslation","format","type","onClick","disabled","style","transform","color","to","CalendarGrid","p","isHeader","radii","normal","WeekWrapper","DayOfWeekItem","DayOfWeek","CellWrapper","isWeekend","isSelectedMonth","TopRopperInCell","justifyContent","DayWrapper","CurrentDay","blue","ShowDaywrapper","TasksList","startDay","lang","localStorage","getItem","day","clone","subtract","daysArray","Array","map","add","data","useFetchTasksQuery","isCurrentDay","moment","isSame","width","_","idx","toUpperCase","dayItem","month","filter","date","endOf","title","slice","ShadowWrapper","CalendarPage","week","dow","useState","setToday","startOf","display","prev","todayHandler"],"sourceRoot":""}