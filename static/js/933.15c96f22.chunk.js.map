{"version":3,"file":"static/js/933.15c96f22.chunk.js","mappings":"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","sources":["pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CalendarPage/CalendarHeader/CalendarHeader.styled.ts","pages/CalendarPage/CalendarHeader/CalendarHeader.tsx","pages/CalendarPage/CalendarGrid/CalendarGrid.styled.ts","pages/CalendarPage/CalendarGrid/CalendarGrid.tsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  background-color: #565759;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const TextWrapper = styled.span`\n  font-size: 32px;\n  margin-right: 10px;\n`;\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n  margin-right: 8px;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  border: unset;\n  cursor: pointer;\n  background-color: #565759;\n  height: 20px;\n  margin-right: 2px;\n  border-radius: 4px;\n  color: #e6e6e6;\n`;\n","import { NavLink } from 'react-router-dom';\nimport * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n  currentDay,\n}: IProps) => {\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <div>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </div>\n        <SC.ButtonsWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n            &lt;\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            Today\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n            &gt;\n          </SC.ButtonWrapper>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <NavLink to=\"calendar\">Month/</NavLink>\n        <NavLink to=\"day\">Day</NavLink>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CalendarHeaderWrapper = styled.span`\n  background-color: #2a2b2d;\n  height: 48px;\n`;\n","import * as SC from './CalendarHeader.styled';\n\nexport const CalendarHeader = () => {\n  return <SC.CalendarHeaderWrapper></SC.CalendarHeaderWrapper>;\n};\n","import styled from 'styled-components';\n\ninterface ICalendarGridProps {\n  isHeader?: boolean;\n}\n\ninterface ITopRopperInCellProps {\n  justifyContent: string;\n}\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const CalendarGrid = styled.div<ICalendarGridProps>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* grid-template-rows: repeat(6, 1fr); */\n  grid-gap: 1px;\n  background-color: ${p => (p.isHeader ? '#1e1f21' : '#4d4c4d')};\n  ${p => p.isHeader && 'border-bottom: 1px solid #4d4c4d'}\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  min-width: 120px;\n  min-height: ${p => (p.isHeader ? 40 : 80)}px;\n  background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')};\n  color: ${p => (p.isSelectedMonth ? 'wheat' : '#4d4c4d')};\n  ${p => p.isHeader && 'text-align:center'}\n`;\n\nexport const TopRopperInCell = styled.div<ITopRopperInCellProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.justifyContent ? p.justifyContent : 'flex-start')};\n`;\n\nexport const DayWrapper = styled.div`\n  width: 33px;\n  height: 33px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 2px;\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ShowDaywrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n","import moment from 'moment';\nimport * as SC from './CalendarGrid.styled';\n\ninterface IProps {\n  startDay: moment.Moment;\n  today: moment.Moment;\n}\n\nexport const CalendarGrid = ({ startDay, today }: IProps) => {\n  const totalDays = 42;\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return moment().isSame(day, 'day');\n  };\n\n  const isSelectedMonth = (month: moment.Moment): boolean => {\n    return today.isSame(month, 'month');\n  };\n\n  return (\n    <>\n      <SC.CalendarGrid isHeader>\n        {[...Array(7)].map((_, idx) => (\n          <SC.CellWrapper isHeader key={idx} isSelectedMonth>\n            {moment()\n              .day(idx + 1)\n              .format('ddd')\n              .toUpperCase()}\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n      <SC.CalendarGrid>\n        {daysArray.map(dayItem => (\n          <SC.CellWrapper\n            key={dayItem.format('DDMMYY')}\n            isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n            isSelectedMonth={isSelectedMonth(dayItem)}\n          >\n            <SC.TopRopperInCell justifyContent={'flex-end'}>\n              <SC.ShowDaywrapper>\n                <SC.DayWrapper>\n                  {isCurrentDay(dayItem) ? (\n                    <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                  ) : (\n                    dayItem.format('D')\n                  )}\n                </SC.DayWrapper>\n              </SC.ShowDaywrapper>\n              <ul style={{ paddingLeft: '10px' }}>\n                <li>tasks</li>\n                <li>tasks</li>\n              </ul>\n            </SC.TopRopperInCell>\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ShadowWrapper = styled.div`\n  border-radius: 8px;\n  height: 100%;\n  overflow: hidden;\n  border-top: 1px solid #737374;\n  border-left: 1px solid #464648;\n  border-right: 1px solid #464648;\n  border-bottom: 2px solid #464648;\n  box-shadow: 0 0 0 1px #1a1a1a 0 8px 20px 6px #888;\n`;\n","// import { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { CalendarHeader } from './CalendarHeader/CalendarHeader';\nimport { CalendarMonitor } from './CalendarMonitor/CalendarMonitor';\nimport { CalendarGrid } from './CalendarGrid/CalendarGrid';\nimport * as SC from './CalendarPage.styled';\nimport { useState } from 'react';\n\nexport const CalendarPage = () => {\n  moment.updateLocale('en', { week: { dow: 1 } });\n\n  // const today = moment();\n  const [today, setToday] = useState(moment());\n  const startDay = today.clone().startOf('month').startOf('week');\n\n  //\n  // const startDayQuery = startDay.clone().format('X');\n  // const endDayQuery = startDay.clone().add(42, \"days\").format('X');\n  //\n  const prevHandler = () => {\n    setToday(prev => prev.clone().subtract(1, 'month'));\n  };\n  const nextHandler = () => {\n    setToday(prev => prev.clone().add(1, 'month'));\n  };\n  const todayHandler = () => {\n    setToday(moment());\n  };\n\n  // const endDay = moment().endOf('month').endOf('week');\n\n  // const calendar = [];\n  // const day = startDay.clone();\n  // while (!day.isAfter(endDay)) {\n  //   calendar.push(day.clone());\n  //   day.add(1, 'day');\n  // }\n\n  // startDay.format('YYYY-MM-DD');\n\n  // const { t } = useTranslation();\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <SC.ShadowWrapper>\n        <CalendarHeader />\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n        />\n        <CalendarGrid startDay={startDay} today={today} />\n      </SC.ShadowWrapper>\n    </div>\n  );\n};\n"],"names":["CalendarMonitorWrapper","styled","LeftWrapper","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","currentDay","format","type","onClick","to","CalendarHeaderWrapper","CalendarHeader","CalendarGrid","p","isHeader","CellWrapper","isWeekend","isSelectedMonth","TopRopperInCell","justifyContent","DayWrapper","CurrentDay","ShowDaywrapper","startDay","day","clone","subtract","daysArray","Array","map","add","isCurrentDay","moment","isSame","_","idx","toUpperCase","dayItem","month","style","paddingLeft","ShadowWrapper","CalendarPage","week","dow","useState","setToday","startOf","display","prev"],"sourceRoot":""}