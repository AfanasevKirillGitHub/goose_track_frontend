{"version":3,"file":"static/js/124.b5e9802d.chunk.js","mappings":"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","sources":["hooks/useGetSearchParams.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CalendarPage/CalendarGrid/CalendarGrid.styled.ts","pages/CalendarPage/CalendarGrid/CalendarGrid.tsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\n\nexport const useGetSearchParams = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const lang = searchParams.get('lang') ?? 'en';\n  const token = searchParams.get('token') ?? '';\n\n  return { lang, token, setSearchParams };\n};\n","import styled from 'styled-components';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n  background-color: #565759;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const TextWrapper = styled.span`\n  font-size: 32px;\n  margin-right: 10px;\n`;\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n  margin-right: 8px;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  border: unset;\n  cursor: pointer;\n  background-color: #565759;\n  height: 20px;\n  margin-right: 2px;\n  border-radius: 4px;\n  color: #e6e6e6;\n`;\n","import moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport 'moment/locale/uk';\n\nimport { NavLink } from 'react-router-dom';\nimport * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n  currentDay,\n}: IProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <div>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </div>\n        <SC.ButtonsWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n            &lt;\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            {t('Today')}\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n            &gt;\n          </SC.ButtonWrapper>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <NavLink to=\"/user/calendar\">{t('Month')}/ </NavLink>\n        <NavLink to=\"/user/calendar/day\"> {t('Day')}</NavLink>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface ICalendarGridProps {\n  isHeader?: boolean;\n}\n\ninterface ITopRopperInCellProps {\n  justifyContent: string;\n}\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const CalendarGrid = styled.div<ICalendarGridProps>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* grid-template-rows: repeat(6, 1fr); */\n  grid-gap: 1px;\n  background-color: ${p => (p.isHeader ? '#1e1f21' : '#4d4c4d')};\n  ${p => p.isHeader && 'border-bottom: 1px solid #4d4c4d'}\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  min-width: 120px;\n  min-height: ${p => (p.isHeader ? 40 : 80)}px;\n  background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')};\n  color: ${p => (p.isSelectedMonth ? 'wheat' : '#4d4c4d')};\n  ${p => p.isHeader && 'text-align:center'}\n`;\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const TopRopperInCell = styled.div<ITopRopperInCellProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.justifyContent ? p.justifyContent : 'flex-start')};\n`;\n\nexport const DayWrapper = styled.div`\n  width: 33px;\n  height: 33px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 2px;\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ShowDaywrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const TasksList = styled.ul`\n  list-style: none;\n  padding-left: 10px;\n`;\n","import moment from 'moment';\nimport * as SC from './CalendarGrid.styled';\nimport { useFetchTasksQuery } from '../../../redux/task/taskOperations';\nimport { useGetSearchParams } from '../../../hooks/useGetSearchParams';\n\ninterface IProps {\n  startDay: moment.Moment;\n  today: moment.Moment;\n}\n\nexport const CalendarGrid = ({ startDay, today }: IProps) => {\n  const { lang } = useGetSearchParams();\n  const targetDateClick = (day: moment.Moment) => {\n    localStorage.setItem('data', JSON.stringify(day.format('YYYY-MM-DD')));\n  };\n\n  const totalDays = 42;\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const { data } = useFetchTasksQuery({ lang });\n  console.log(data);\n\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return moment().isSame(day, 'day');\n  };\n\n  const isSelectedMonth = (month: moment.Moment): boolean => {\n    return today.isSame(month, 'month');\n  };\n\n  return (\n    <>\n      <SC.CalendarGrid isHeader>\n        {[...Array(7)].map((_, idx) => (\n          <SC.CellWrapper isHeader key={idx} isSelectedMonth>\n            {moment()\n              .day(idx + 1)\n              .format('ddd')\n              .toUpperCase()}\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n      <SC.CalendarGrid>\n        {daysArray.map(dayItem => (\n          <SC.Link to=\"day\" key={dayItem.format('DDMMYY')}>\n            <SC.CellWrapper\n              onClick={() => targetDateClick(dayItem)}\n              isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n              isSelectedMonth={isSelectedMonth(dayItem)}\n            >\n              <SC.TopRopperInCell justifyContent={'flex-end'}>\n                <SC.ShowDaywrapper>\n                  <SC.DayWrapper>\n                    {isCurrentDay(dayItem) ? (\n                      <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                    ) : (\n                      dayItem.format('D')\n                    )}\n                  </SC.DayWrapper>\n                </SC.ShowDaywrapper>\n                <SC.TasksList>\n                  {data\n                    ?.filter(\n                      ({ date }) =>\n                        date >= dayItem.format('X') &&\n                        date <= dayItem.clone().endOf('day').format('X')\n                    )\n                    .map(({ date, title }) => (\n                      <li key={date}>\n                        {title['en']\n                          ? title['en']?.slice(0, 8)\n                          : title['ua']?.slice(0, 8)}\n                      </li>\n                    ))}\n                </SC.TasksList>\n              </SC.TopRopperInCell>\n            </SC.CellWrapper>\n          </SC.Link>\n        ))}\n      </SC.CalendarGrid>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ShadowWrapper = styled.div`\n  border-radius: 8px;\n  height: 100%;\n  overflow: hidden;\n  border-top: 1px solid #737374;\n  border-left: 1px solid #464648;\n  border-right: 1px solid #464648;\n  border-bottom: 2px solid #464648;\n  box-shadow: 0 0 0 1px #1a1a1a 0 8px 20px 6px #888;\n`;\n","// import { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { useState } from 'react';\nimport { CalendarMonitor } from './CalendarMonitor/CalendarMonitor';\nimport { CalendarGrid } from './CalendarGrid/CalendarGrid';\nimport * as SC from './CalendarPage.styled';\n\nimport 'moment/locale/uk';\nimport { useTranslation } from 'react-i18next';\n\nexport const CalendarPage = () => {\n  const { t } = useTranslation();\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n\n  moment.locale(t(`lang`));\n\n  const [today, setToday] = useState(moment());\n  const startDay = today.clone().startOf('month').startOf('week');\n\n  const prevHandler = () => {\n    setToday(prev => prev.clone().subtract(1, 'month'));\n  };\n  const nextHandler = () => {\n    setToday(prev => prev.clone().add(1, 'month'));\n  };\n  const todayHandler = () => {\n    setToday(moment());\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <SC.ShadowWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n        />\n        <CalendarGrid startDay={startDay} today={today} />\n      </SC.ShadowWrapper>\n    </div>\n  );\n};\n"],"names":["useGetSearchParams","useSearchParams","searchParams","setSearchParams","lang","get","token","CalendarMonitorWrapper","styled","LeftWrapper","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","currentDay","t","useTranslation","format","type","onClick","to","CalendarGrid","p","isHeader","CellWrapper","isWeekend","isSelectedMonth","Link","NavLink","TopRopperInCell","justifyContent","DayWrapper","CurrentDay","ShowDaywrapper","TasksList","startDay","day","clone","subtract","daysArray","Array","map","add","data","useFetchTasksQuery","console","log","isCurrentDay","moment","isSame","_","idx","toUpperCase","dayItem","localStorage","setItem","JSON","stringify","targetDateClick","month","filter","date","endOf","title","slice","ShadowWrapper","CalendarPage","week","dow","useState","setToday","startOf","style","display","prev"],"sourceRoot":""}