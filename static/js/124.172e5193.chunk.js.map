{"version":3,"file":"static/js/124.172e5193.chunk.js","mappings":"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","sources":["hooks/useGetSearchParams.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CalendarPage/CalendarGrid/CalendarGrid.styled.ts","pages/CalendarPage/CalendarGrid/CalendarGrid.tsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\n\nexport const useGetSearchParams = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const lang = searchParams.get('lang') ?? 'en';\n  const token = searchParams.get('token') ?? '';\n\n  return { lang, token, setSearchParams };\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 32px;\n  /* background-color: #565759; */\n  width: 100%;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\nexport const TextWrapperOutline = styled.div`\n  background-color: #3e85f3;\n  padding: 8px 12px;\n  border-radius: 8px;\n`;\n\nexport const TextWrapper = styled.span`\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 0.9;\n  margin-right: 10px;\n  text-transform: uppercase;\n`;\n\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  margin-left: 20px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border-radius: 8px;\n  padding: 10px 10px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  color: #616161;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: #3e85f3;\n  padding: 8px 16px;\n  background-color: #e3f3ff;\n  &.active {\n    background-color: #3e85f350;\n  }\n`;\n\nexport const LinkMonth = styled(Link)`\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n`;\n\nexport const LinkDay = styled(Link)`\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n","import moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport 'moment/locale/uk';\n\nimport * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n  currentDay,\n}: IProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <SC.TextWrapperOutline>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </SC.TextWrapperOutline>\n        <SC.ButtonsWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n            &lt;\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            {t('Today')}\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n            &gt;\n          </SC.ButtonWrapper>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <SC.LinkMonth to=\"/user/calendar\">{t('Month')}</SC.LinkMonth>\n        <SC.LinkDay to={`/user/day/${today.format('YYYY-MM-DD')}`}>\n          {t('Day')}\n        </SC.LinkDay>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface ICalendarGridProps {\n  isHeader?: boolean;\n}\n\ninterface ITopRopperInCellProps {\n  justifyContent: string;\n}\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const CalendarGrid = styled.div<ICalendarGridProps>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* grid-template-rows: repeat(6, 1fr); */\n  grid-gap: 1px;\n  background-color: ${p => (p.isHeader ? '#1e1f21' : '#4d4c4d')};\n  ${p => p.isHeader && 'border-bottom: 1px solid #4d4c4d'}\n  width:100%;\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  min-width: 120px;\n  min-height: ${p => (p.isHeader ? 40 : 104)}px;\n  background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')};\n  color: ${p => (p.isSelectedMonth ? 'wheat' : '#4d4c4d')};\n  ${p => p.isHeader && 'text-align:center'}\n`;\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const TopRopperInCell = styled.div<ITopRopperInCellProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: ${p => (p.justifyContent ? p.justifyContent : 'flex-start')};\n`;\n\nexport const DayWrapper = styled.div`\n  width: 33px;\n  height: 33px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 2px;\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ShowDaywrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const TasksList = styled.ul`\n  list-style: none;\n  padding-left: 10px;\n`;\n","import moment from 'moment';\nimport * as SC from './CalendarGrid.styled';\nimport { useFetchTasksQuery } from '../../../redux/task/taskOperations';\nimport { useGetSearchParams } from '../../../hooks/useGetSearchParams';\n\ninterface IProps {\n  startDay: moment.Moment;\n  today: moment.Moment;\n}\n\nexport const CalendarGrid = ({ startDay, today }: IProps) => {\n  const { lang } = useGetSearchParams();\n\n  const totalDays = 42;\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const { data } = useFetchTasksQuery({ lang });\n\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return moment().isSame(day, 'day');\n  };\n\n  const isSelectedMonth = (month: moment.Moment): boolean => {\n    return today.isSame(month, 'month');\n  };\n\n  return (\n    <main style={{ width: '1151px' }}>\n      <SC.CalendarGrid isHeader>\n        {[...Array(7)].map((_, idx) => (\n          <SC.CellWrapper isHeader key={idx} isSelectedMonth>\n            {moment()\n              .day(idx + 1)\n              .format('ddd')\n              .toUpperCase()}\n          </SC.CellWrapper>\n        ))}\n      </SC.CalendarGrid>\n      <SC.CalendarGrid>\n        {daysArray.map(dayItem => (\n          <SC.Link\n            to={`/user/day/${dayItem.format('YYYY-MM-DD')}`}\n            key={dayItem.format('DDMMYY')}\n          >\n            <SC.CellWrapper\n              isWeekend={dayItem.day() === 6 || dayItem.day() === 0}\n              isSelectedMonth={isSelectedMonth(dayItem)}\n            >\n              <SC.TopRopperInCell justifyContent={'flex-end'}>\n                <SC.ShowDaywrapper>\n                  <SC.DayWrapper>\n                    {isCurrentDay(dayItem) ? (\n                      <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                    ) : (\n                      dayItem.format('D')\n                    )}\n                  </SC.DayWrapper>\n                </SC.ShowDaywrapper>\n                <SC.TasksList>\n                  {data\n                    ?.filter(\n                      ({ date }) =>\n                        date >= dayItem.format('X') &&\n                        date <= dayItem.clone().endOf('day').format('X')\n                    )\n                    .map(({ date, title }) => (\n                      <li key={date}>\n                        {title['en']\n                          ? title['en']?.slice(0, 8)\n                          : title['ua']?.slice(0, 8)}\n                      </li>\n                    ))}\n                </SC.TasksList>\n              </SC.TopRopperInCell>\n            </SC.CellWrapper>\n          </SC.Link>\n        ))}\n      </SC.CalendarGrid>\n    </main>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ShadowWrapper = styled.div`\n  border-radius: 8px;\n  height: 100%;\n  overflow: hidden;\n  /* border-top: 1px solid #737374;\n  border-left: 1px solid #464648;\n  border-right: 1px solid #464648;\n  border-bottom: 2px solid #464648; */\n  box-shadow: 0 0 0 1px #1a1a1a 0 8px 20px 6px #888;\n`;\n","// import { useTranslation } from 'react-i18next';\nimport moment from 'moment';\nimport { useState } from 'react';\nimport { CalendarMonitor } from './CalendarMonitor/CalendarMonitor';\nimport { CalendarGrid } from './CalendarGrid/CalendarGrid';\nimport * as SC from './CalendarPage.styled';\n\nimport 'moment/locale/uk';\nimport { useTranslation } from 'react-i18next';\n\nexport const CalendarPage = () => {\n  const { t } = useTranslation();\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n\n  moment.locale(t(`lang`));\n\n  const [today, setToday] = useState(moment());\n  const startDay = today.clone().startOf('month').startOf('week');\n\n  const prevHandler = () => {\n    setToday(prev => prev.clone().subtract(1, 'month'));\n  };\n  const nextHandler = () => {\n    setToday(prev => prev.clone().add(1, 'month'));\n  };\n  const todayHandler = () => {\n    setToday(moment());\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <SC.ShadowWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n        />\n        <CalendarGrid startDay={startDay} today={today} />\n      </SC.ShadowWrapper>\n    </div>\n  );\n};\n"],"names":["useGetSearchParams","useSearchParams","searchParams","setSearchParams","lang","get","token","CalendarMonitorWrapper","styled","LeftWrapper","TextWrapperOutline","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","Link","NavLink","LinkMonth","LinkDay","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","currentDay","t","useTranslation","format","type","onClick","to","CalendarGrid","p","isHeader","CellWrapper","isWeekend","isSelectedMonth","TopRopperInCell","justifyContent","DayWrapper","CurrentDay","ShowDaywrapper","TasksList","startDay","day","clone","subtract","daysArray","Array","map","add","data","useFetchTasksQuery","isCurrentDay","moment","isSame","style","width","_","idx","toUpperCase","dayItem","month","filter","date","endOf","title","slice","ShadowWrapper","CalendarPage","week","dow","useState","setToday","startOf","display","prev"],"sourceRoot":""}