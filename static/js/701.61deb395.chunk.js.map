{"version":3,"file":"static/js/701.61deb395.chunk.js","mappings":"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","sources":["pages/CalendarPage/CalendarMonitor/CalendarMonitor.styled.ts","pages/CalendarPage/CalendarMonitor/CalendarMonitor.tsx","pages/CurrentDayPage/CurrentDayPage.styled.ts","pages/CurrentDayPage/CurrentDayPage.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const CalendarMonitorWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 32px;\n  /* background-color: #565759; */\n  width: 100%;\n`;\n\nexport const LeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\nexport const TextWrapperOutline = styled.div`\n  background-color: #3e85f3;\n  padding: 8px 12px;\n  border-radius: 8px;\n`;\n\nexport const TextWrapper = styled.span`\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 0.9;\n  margin-right: 10px;\n  text-transform: uppercase;\n`;\n\nexport const TitleWrapper = styled(TextWrapper)`\n  font-weight: bold;\n`;\n\nexport const ButtonsWrapper = styled.div`\n  margin-left: 20px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const ButtonWrapper = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border-radius: 8px;\n  padding: 10px 10px;\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  color: #616161;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: #3e85f3;\n  padding: 8px 16px;\n  background-color: #e3f3ff;\n  &.active {\n    background-color: #3e85f350;\n  }\n`;\n\nexport const LinkMonth = styled(Link)`\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n`;\n\nexport const LinkDay = styled(Link)`\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n","import moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport 'moment/locale/uk';\n\nimport * as SC from './CalendarMonitor.styled';\n\ninterface IProps {\n  today: moment.Moment;\n  todayHandler: () => void;\n  nextHandler: () => void;\n  prevHandler: () => void;\n  currentDay?: boolean;\n}\n\nexport const CalendarMonitor = ({\n  today,\n  prevHandler,\n  nextHandler,\n  todayHandler,\n  currentDay,\n}: IProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <SC.CalendarMonitorWrapper>\n      <SC.LeftWrapper>\n        <SC.TextWrapperOutline>\n          {currentDay && <SC.TextWrapper>{today.format('D')}</SC.TextWrapper>}\n          <SC.TitleWrapper>{today.format('MMMM')}</SC.TitleWrapper>\n          <SC.TextWrapper>{today.format('YYYY')}</SC.TextWrapper>\n        </SC.TextWrapperOutline>\n        <SC.ButtonsWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={prevHandler}>\n            &lt;\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={todayHandler}>\n            {t('Today')}\n          </SC.ButtonWrapper>\n          <SC.ButtonWrapper type=\"button\" onClick={nextHandler}>\n            &gt;\n          </SC.ButtonWrapper>\n        </SC.ButtonsWrapper>\n      </SC.LeftWrapper>\n      <SC.ButtonsWrapper>\n        <SC.LinkMonth to=\"/user/calendar\">{t('Month')}</SC.LinkMonth>\n        <SC.LinkDay to=\"/user/day\"> {t('Day')}</SC.LinkDay>\n      </SC.ButtonsWrapper>\n    </SC.CalendarMonitorWrapper>\n  );\n};\n","import styled from 'styled-components';\n\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  /* background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')}; */\n  color: black;\n  ${p => p.isHeader && 'text-align:center'}\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n\n  width: 100%;\n  height: 100%;\n`;\n\nexport const WeekWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-around;\n`;\n\nexport const DaysWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-around;\n`;\n\nexport const DayOfWeek = styled.div``;\n\nexport const WeekAndDayWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-around; */\n  width: 100%;\n`;\n","import moment from 'moment';\nimport 'moment/locale/uk';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CalendarMonitor } from '../CalendarPage/CalendarMonitor/CalendarMonitor';\nimport * as SC from './CurrentDayPage.styled';\n\nexport const CurrentDayPage = () => {\n  const { t } = useTranslation();\n  moment.updateLocale('en', { day: { dow: 1 } });\n\n  moment.locale(t(`lang`)!);\n  const [today, setToday] = useState(() => {\n    const data = JSON.parse(localStorage.getItem('data')!) || '';\n    return data ? moment(new Date(data)) : moment();\n  });\n  const [selectedDay, setSelectedDay] = useState(() => {\n    const data = JSON.parse(localStorage.getItem('data')!) || '';\n    return data ? moment(new Date(data)) : moment();\n  });\n\n  useEffect(() => {\n    return () => localStorage.removeItem('data');\n  }, []);\n\n  const totalDays = 7;\n  const startDay = today.clone().startOf('isoWeek');\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const prevHandler = () => {\n    const prevDay = today.clone().subtract(1, 'day');\n    if (prevDay.isBefore(startDay)) {\n      setSelectedDay(startDay);\n      setToday(startDay);\n    } else {\n      setSelectedDay(prevDay);\n      setToday(prevDay);\n    }\n  };\n\n  const nextHandler = () => {\n    const nextDay = today.clone().add(1, 'day');\n    if (nextDay.isAfter(startDay.clone().add(6, 'day'))) {\n      setSelectedDay(startDay.clone().add(6, 'day'));\n      setToday(startDay.clone().add(6, 'day'));\n    } else {\n      setToday(nextDay);\n      setSelectedDay(nextDay);\n    }\n  };\n\n  const todayHandler = () => {\n    setSelectedDay(moment());\n    setToday(moment());\n  };\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return selectedDay.isSame(day, 'day');\n  };\n\n  return (\n    <main style={{ width: '1151px' }}>\n      <SC.PageWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n          currentDay={true}\n        />\n        <SC.WeekAndDayWrapper>\n          <SC.WeekWrapper>\n            {daysArray.map((dayItem, idx) => (\n              <SC.DayOfWeek key={idx}>\n                {dayItem.format('ddd').toUpperCase()}\n              </SC.DayOfWeek>\n            ))}\n          </SC.WeekWrapper>\n          <SC.DaysWrapper>\n            {daysArray.map(dayItem => (\n              <div key={dayItem.format('DDMMYY')}>\n                <SC.CellWrapper>\n                  {isCurrentDay(dayItem) ? (\n                    <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                  ) : (\n                    dayItem.format('D')\n                  )}\n                </SC.CellWrapper>\n              </div>\n            ))}\n          </SC.DaysWrapper>\n        </SC.WeekAndDayWrapper>\n      </SC.PageWrapper>\n    </main>\n  );\n};\n"],"names":["CalendarMonitorWrapper","styled","LeftWrapper","TextWrapperOutline","TextWrapper","TitleWrapper","ButtonsWrapper","ButtonWrapper","Link","NavLink","LinkMonth","LinkDay","CalendarMonitor","today","prevHandler","nextHandler","todayHandler","currentDay","t","useTranslation","format","type","onClick","to","PageWrapper","CellWrapper","p","isWeekend","isHeader","CurrentDay","WeekWrapper","DaysWrapper","DayOfWeek","WeekAndDayWrapper","CurrentDayPage","moment","day","dow","useState","data","JSON","parse","localStorage","getItem","Date","setToday","selectedDay","setSelectedDay","useEffect","removeItem","startDay","clone","startOf","subtract","daysArray","Array","map","add","isCurrentDay","isSame","style","width","prevDay","isBefore","nextDay","isAfter","dayItem","idx","toUpperCase"],"sourceRoot":""}