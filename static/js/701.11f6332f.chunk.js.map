{"version":3,"file":"static/js/701.11f6332f.chunk.js","mappings":"+RAQaA,EAAcC,EAAAA,GAAAA,IAAH,6FAMXC,EAAcD,EAAAA,GAAAA,IAAH,gFACC,SAAAE,GAAC,OAAKA,EAAEC,UAAY,UAAY,SAA/B,IAEtB,SAAAD,GAAC,OAAIA,EAAEE,UAAY,mBAAlB,IAGQC,EAAaL,EAAAA,GAAAA,IAAH,kLAWVM,EAAcN,EAAAA,GAAAA,IAAH,2GAMXO,EAAcP,EAAAA,GAAAA,IAAH,2GAMXQ,EAAYR,EAAAA,GAAAA,IAAH,6EAMTS,EAAoBT,EAAAA,GAAAA,IAAH,sI,UC1CjBU,EAAiB,WAC5BC,IAAAA,aAAoB,KAAM,CAAEC,IAAK,CAAEC,IAAK,KACxC,OAA0BC,EAAAA,EAAAA,UAASH,OAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAAsCF,EAAAA,EAAAA,UAASH,OAA/C,eAAOM,EAAP,KAAoBC,EAApB,KAGMC,EAAWJ,EAAMK,QAAQC,QAAQ,WACjCT,EAAMO,EAASC,QAAQE,SAAS,EAAG,OACnCC,GAAY,OAAIC,MAHJ,IAGsBC,KAAI,kBAAMb,EAAIc,IAAI,EAAG,OAAON,OAAxB,IA4BtCO,EAAe,SAACf,GACpB,OAAOK,EAAYW,OAAOhB,EAAK,MAChC,EAED,OACE,kBAAMiB,MAAO,CAAEC,QAAS,QAAxB,WACE,SAACC,EAAA,EAAD,KACA,UAAC,EAAD,YACE,SAACC,EAAA,EAAD,CACEC,YAnCY,WAClB,IAAMC,EAAUnB,EAAMK,QAAQE,SAAS,EAAG,OACtCY,EAAQC,SAAShB,IACnBD,EAAeC,GACfH,EAASG,KAETD,EAAegB,GACflB,EAASkB,GAEZ,EA2BOE,YAzBY,WAClB,IAAMC,EAAUtB,EAAMK,QAAQM,IAAI,EAAG,OACjCW,EAAQC,QAAQnB,EAASC,QAAQM,IAAI,EAAG,SAC1CR,EAAeC,EAASC,QAAQM,IAAI,EAAG,QACvCV,EAASG,EAASC,QAAQM,IAAI,EAAG,UAEjCV,EAASqB,GACTnB,EAAemB,GAElB,EAiBOE,aAfa,WACnBrB,EAAeP,OACfK,EAASL,MACV,EAaOI,MAAOA,EACPyB,YAAY,KAEd,UAAC,EAAD,YACE,SAAC,EAAD,UACGjB,EAAUE,KAAI,SAACgB,EAASC,GAAV,OACb,SAAC,EAAD,UACGD,EAAQE,OAAO,OAAOC,eADNF,EADN,OAMjB,SAAC,EAAD,UACGnB,EAAUE,KAAI,SAAAgB,GAAO,OACpB,0BACE,SAAC,EAAD,UACGd,EAAac,IACZ,SAAC,EAAD,UAAgBA,EAAQE,OAAO,OAE/BF,EAAQE,OAAO,QALXF,EAAQE,OAAO,UADL,cAgBjC,C","sources":["pages/CurrentDayPage/CurrentDayPage.styled.ts","pages/CurrentDayPage/CurrentDayPage.tsx"],"sourcesContent":["import styled from 'styled-components';\n\ninterface ICellWrapperProps {\n  isWeekend?: boolean;\n  isHeader?: boolean;\n  isSelectedMonth?: boolean;\n}\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const CellWrapper = styled.div<ICellWrapperProps>`\n  /* background-color: ${p => (p.isWeekend ? '#272829' : '#1e1f21')}; */\n  color: black;\n  ${p => p.isHeader && 'text-align:center'}\n`;\n\nexport const CurrentDay = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: red;\n  border-radius: 50%;\n\n  width: 100%;\n  height: 100%;\n`;\n\nexport const WeekWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n\nexport const DaysWrapper = styled.div`\n  display: flex;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n\nexport const DayOfWeek = styled.div`\n  :not(:last-child) {\n    margin-right: 20px;\n  }\n`;\n\nexport const WeekAndDayWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n  justify-content: space-between;\n`;\n","import moment from 'moment';\nimport { useState } from 'react';\n\nimport { AccountSidebar } from '../../components/Account/AccountSidebar';\nimport { CalendarMonitor } from '../CalendarPage/CalendarMonitor/CalendarMonitor';\nimport * as SC from './CurrentDayPage.styled';\n\nexport const CurrentDayPage = () => {\n  moment.updateLocale('en', { day: { dow: 1 } });\n  const [today, setToday] = useState(moment());\n  const [selectedDay, setSelectedDay] = useState(moment());\n\n  const totalDays = 7;\n  const startDay = today.clone().startOf('isoWeek');\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const prevHandler = () => {\n    const prevDay = today.clone().subtract(1, 'day');\n    if (prevDay.isBefore(startDay)) {\n      setSelectedDay(startDay);\n      setToday(startDay);\n    } else {\n      setSelectedDay(prevDay);\n      setToday(prevDay);\n    }\n  };\n\n  const nextHandler = () => {\n    const nextDay = today.clone().add(1, 'day');\n    if (nextDay.isAfter(startDay.clone().add(6, 'day'))) {\n      setSelectedDay(startDay.clone().add(6, 'day'));\n      setToday(startDay.clone().add(6, 'day'));\n    } else {\n      setToday(nextDay);\n      setSelectedDay(nextDay);\n    }\n  };\n\n  const todayHandler = () => {\n    setSelectedDay(moment());\n    setToday(moment());\n  };\n  const isCurrentDay = (day: moment.Moment): boolean => {\n    return selectedDay.isSame(day, 'day');\n  };\n\n  return (\n    <main style={{ display: 'flex' }}>\n      <AccountSidebar />\n      <SC.PageWrapper>\n        <CalendarMonitor\n          prevHandler={prevHandler}\n          nextHandler={nextHandler}\n          todayHandler={todayHandler}\n          today={today}\n          currentDay={true}\n        />\n        <SC.WeekAndDayWrapper>\n          <SC.WeekWrapper>\n            {daysArray.map((dayItem, idx) => (\n              <SC.DayOfWeek key={idx}>\n                {dayItem.format('ddd').toUpperCase()}\n              </SC.DayOfWeek>\n            ))}\n          </SC.WeekWrapper>\n          <SC.DaysWrapper>\n            {daysArray.map(dayItem => (\n              <div key={dayItem.format('DDMMYY')}>\n                <SC.CellWrapper>\n                  {isCurrentDay(dayItem) ? (\n                    <SC.CurrentDay>{dayItem.format('D')}</SC.CurrentDay>\n                  ) : (\n                    dayItem.format('D')\n                  )}\n                </SC.CellWrapper>\n              </div>\n            ))}\n          </SC.DaysWrapper>\n        </SC.WeekAndDayWrapper>\n      </SC.PageWrapper>\n    </main>\n  );\n};\n"],"names":["PageWrapper","styled","CellWrapper","p","isWeekend","isHeader","CurrentDay","WeekWrapper","DaysWrapper","DayOfWeek","WeekAndDayWrapper","CurrentDayPage","moment","day","dow","useState","today","setToday","selectedDay","setSelectedDay","startDay","clone","startOf","subtract","daysArray","Array","map","add","isCurrentDay","isSame","style","display","AccountSidebar","CalendarMonitor","prevHandler","prevDay","isBefore","nextHandler","nextDay","isAfter","todayHandler","currentDay","dayItem","idx","format","toUpperCase"],"sourceRoot":""}